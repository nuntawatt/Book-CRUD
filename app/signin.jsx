// app/signin.jsx
import React, { useEffect, useState } from "react";
import { View, TextInput, Alert, KeyboardAvoidingView, Platform } from "react-native";
import { Link, router } from "expo-router";
import { useTheme } from "../src/context/ThemeContext";
import { useAuth } from "../src/context/AuthContext";
import Button from "../src/components/ui/Button";
import { Title, Muted } from "../src/components/ui/Text";
import {
  checkBiometricCapability,
  authenticateOnce,
  isBiometricEnabled,
  setBiometricEnabled,
  markBiometricUnlocked,
} from "../src/lib/biometric";

export default function SignIn() {
  const { color, layout } = useTheme();
  const { login, isAuthed } = useAuth();
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [submitting, setSubmitting] = useState(false);

  const [bioSupported, setBioSupported] = useState(false);
  const [bioEnrolled, setBioEnrolled] = useState(false);
  const [bioEnabled, setBioEnabledLocal] = useState(false);

  useEffect(() => {
    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á + ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ
    (async () => {
      const { hasHardware, isEnrolled } = await checkBiometricCapability();
      setBioSupported(hasHardware);
      setBioEnrolled(isEnrolled);
      setBioEnabledLocal(await isBiometricEnabled());
    })();
  }, []);

  useEffect(() => {
    // ‡∏ñ‡πâ‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏û‡∏≤‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ book
    if (isAuthed) router.replace("/book");
  }, [isAuthed]);

  const inputStyle = {
    borderWidth: 1,
    borderColor: color.border,
    borderRadius: layout.radius,
    paddingHorizontal: 14,
    paddingVertical: 10,
    backgroundColor: color.surface,
    color: color.text,
  };

  const onSubmit = async () => {
    const e = email.trim();
    if (!e || !password) {
      Alert.alert("‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö", "‡πÇ‡∏õ‡∏£‡∏î‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô");
      return;
    }
    try {
      setSubmitting(true);
      await login(e, password);
      // ‡πÄ‡∏™‡∏ô‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡πÑ‡∏ö‡πÇ‡∏≠‡πÄ‡∏°‡∏ï‡∏£‡∏¥‡∏Å‡∏ã‡πå‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å (‡∏ñ‡πâ‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö)
      if (bioSupported && bioEnrolled) {
        Alert.alert(
          "‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡πÑ‡∏ö‡πÇ‡∏≠‡πÄ‡∏°‡∏ï‡∏£‡∏¥‡∏Å‡∏ã‡πå?",
          "‡πÉ‡∏ä‡πâ‡∏•‡∏≤‡∏¢‡∏ô‡∏¥‡πâ‡∏ß‡∏°‡∏∑‡∏≠/Face ID ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏≠‡∏õ‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ",
          [
            { text: "‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á", style: "cancel", onPress: () => router.replace("/book") },
            {
              text: "‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏¢",
              onPress: async () => {
                await setBiometricEnabled(true);
                setBioEnabledLocal(true);
                router.replace("/book");
              },
            },
          ]
        );
      } else {
        router.replace("/book");
      }
    } catch (err) {
      Alert.alert("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", err?.response?.data?.message || err?.message || "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô");
    } finally {
      setSubmitting(false);
    }
  };

  const onUnlockWithBiometric = async () => {
    if (!bioSupported || !bioEnrolled) {
      Alert.alert("‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ", "‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏•‡∏≤‡∏¢‡∏ô‡∏¥‡πâ‡∏ß‡∏°‡∏∑‡∏≠/Face ID");
      return;
    }
    try {
      const res = await authenticateOnce("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏≠‡∏õ");
      if (res.success) {
        await markBiometricUnlocked();
        // ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏ñ‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô "‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å UI" ‚Äî ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏Å‡πá‡∏ï‡πà‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡∏ù‡∏±‡πà‡∏á Auth ‡∏¢‡∏±‡∏á Valid
        router.replace("/book");
      } else {
        Alert.alert("‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô", "‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á");
      }
    } catch {
      Alert.alert("‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡πÑ‡∏î‡πâ");
    }
  };

  return (
    <KeyboardAvoidingView behavior={Platform.OS === "ios" ? "padding" : undefined} style={{ flex: 1 }}>
      <View style={{ flex: 1, backgroundColor: color.background, padding: layout.pad, gap: 10 }}>
        <Title>‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö</Title>

        <TextInput
          value={email}
          onChangeText={setEmail}
          placeholder="Email"
          placeholderTextColor={color.textMuted}
          autoCapitalize="none"
          autoComplete="email"
          keyboardType="email-address"
          returnKeyType="next"
          style={inputStyle}
        />

        <TextInput
          value={password}
          onChangeText={setPassword}
          placeholder="Password"
          placeholderTextColor={color.textMuted}
          secureTextEntry
          returnKeyType="done"
          style={inputStyle}
          onSubmitEditing={onSubmit}
        />

        <Button title={submitting ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö..." : "‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö"} onPress={onSubmit} disabled={submitting} />

        {/* ‡∏õ‡∏∏‡πà‡∏°‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏î‡πâ‡∏ß‡∏¢‡πÑ‡∏ö‡πÇ‡∏≠‡πÄ‡∏°‡∏ï‡∏£‡∏¥‡∏Å‡∏ã‡πå (‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡πÑ‡∏ß‡πâ) */}
        {bioEnabled && bioSupported && bioEnrolled && (
          <Button title="üîì ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏î‡πâ‡∏ß‡∏¢‡πÑ‡∏ö‡πÇ‡∏≠‡πÄ‡∏°‡∏ï‡∏£‡∏¥‡∏Å‡∏ã‡πå" tone="surface" onPress={onUnlockWithBiometric} />
        )}

        <View style={{ height: 8 }} />
        <Link href="/signup" asChild>
          <Button title="‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ? ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å" tone="surface" />
        </Link>

        {!bioEnabled && bioSupported && !bioEnrolled && (
          <Muted style={{ marginTop: 8 }}>
            * ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏•‡∏≤‡∏¢‡∏ô‡∏¥‡πâ‡∏ß‡∏°‡∏∑‡∏≠/Face ID ‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô ‡∏à‡∏∂‡∏á‡∏à‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
          </Muted>
        )}
      </View>
    </KeyboardAvoidingView>
  );
}
