// app/local_authentication.jsx
import React, { useEffect, useState } from "react";
import { View, Alert } from "react-native";
import Button from "../src/components/ui/Button";
import { useTheme } from "../src/context/ThemeContext";
import { Title, Muted } from "../src/components/ui/Text";
import {
  checkBiometricCapability,
  authenticateOnce,
  isBiometricEnabled,
  setBiometricEnabled,
  markBiometricUnlocked,
} from "../src/lib/biometric";
import { useAuth } from "../src/context/AuthContext";
import { router } from "expo-router";

export default function LocalAuthScreen() {
  const { color, layout } = useTheme();
  const { refreshWithBiometric } = useAuth();
  const [cap, setCap] = useState({ hasHardware: false, isEnrolled: false, types: [] });
  const [enabled, setEnabled] = useState(false);

  useEffect(() => {
    (async () => {
      const c = await checkBiometricCapability();
      setCap(c);
      setEnabled(await isBiometricEnabled());
    })();
  }, []);

  const doAuth = async () => {
    if (!cap.hasHardware || !cap.isEnrolled) {
      Alert.alert("‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ", "‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ö‡πÇ‡∏≠‡πÄ‡∏°‡∏ï‡∏£‡∏¥‡∏Å‡∏ã‡πå");
      return;
    }
    const res = await authenticateOnce("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏≠‡∏õ");
    if (!res.success) {
      Alert.alert("‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô", "‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á");
      return;
    }
    try {
      await markBiometricUnlocked();
      // üëâ ‡∏î‡∏∂‡∏á accessToken ‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å refreshToken ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ
      await refreshWithBiometric();
      router.replace("/book");
    } catch (e) {
      Alert.alert("‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏", "‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á");
      router.replace("/signin");
    }
  };

  const onToggle = async () => {
    const next = !enabled;
    if (next) {
      if (!cap.hasHardware) return Alert.alert("‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö", "‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÑ‡∏ö‡πÇ‡∏≠‡πÄ‡∏°‡∏ï‡∏£‡∏¥‡∏Å‡∏ã‡πå");
      if (!cap.isEnrolled) return Alert.alert("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤", "‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏•‡∏≤‡∏¢‡∏ô‡∏¥‡πâ‡∏ß‡∏°‡∏∑‡∏≠/Face ID ‡πÉ‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Å‡πà‡∏≠‡∏ô");
      await setBiometricEnabled(true);
      setEnabled(true);
      Alert.alert("‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß", "‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏î‡πâ‡∏ß‡∏¢‡πÑ‡∏ö‡πÇ‡∏≠‡πÄ‡∏°‡∏ï‡∏£‡∏¥‡∏Å‡∏ã‡πå‡πÑ‡∏î‡πâ");
    } else {
      await setBiometricEnabled(false);
      setEnabled(false);
      Alert.alert("‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß", "‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏≤‡∏°‡πÑ‡∏ö‡πÇ‡∏≠‡πÄ‡∏°‡∏ï‡∏£‡∏¥‡∏Å‡∏ã‡πå‡∏≠‡∏µ‡∏Å");
    }
  };

  return (
    <View style={{ flex: 1, backgroundColor: color.background, padding: layout.pad, gap: 12, justifyContent: "center" }}>
      <Title>‡∏•‡πá‡∏≠‡∏Å‡∏î‡πâ‡∏ß‡∏¢‡πÑ‡∏ö‡πÇ‡∏≠‡πÄ‡∏°‡∏ï‡∏£‡∏¥‡∏Å‡∏ã‡πå</Title>
      <Muted>
        ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå: {cap.hasHardware ? "‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö" : "‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö"} / {cap.isEnrolled ? "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß" : "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤"}
      </Muted>
      <Muted>‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡πÅ‡∏≠‡∏õ: {enabled ? "‡πÄ‡∏õ‡∏¥‡∏î" : "‡∏õ‡∏¥‡∏î"}</Muted>

      <Button
        title={enabled ? "üîì ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ" : "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°"}
        onPress={enabled ? doAuth : async () => {
          const c = await checkBiometricCapability(); setCap(c);
        }}
      />
      <Button title={enabled ? "‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏ö‡πÇ‡∏≠‡πÄ‡∏°‡∏ï‡∏£‡∏¥‡∏Å‡∏ã‡πå" : "‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏ö‡πÇ‡∏≠‡πÄ‡∏°‡∏ï‡∏£‡∏¥‡∏Å‡∏ã‡πå"} tone="surface" onPress={onToggle} />
      <Button title="‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠" tone="surface" onPress={() => router.replace("/book")} />
    </View>
  );
}
